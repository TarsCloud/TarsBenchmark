// **********************************************************************
// Parsed By TarsParser(2.4.20), Generated By tools(20200627)
// TarsParser Maintained By <TARS> and tools Maintained By <superzheng>
// Generated from "QueryF.tars" by Client Mode
// **********************************************************************

/* eslint-disable */

"use strict";

var TarsStream = require("@tars/stream");
var TarsError  = require("@tars/rpc").error;
var _TARS_MODULE_A_ = require("./EndpointFTars.js");

var _makeError = function (data, message, type) {
    var error = new Error(message || "");
    error.request = data.request;
    error.response = {
        "costtime" : data.request.costtime
    };
    if (type === TarsError.CLIENT.DECODE_ERROR) {
        error.name = "DECODE_ERROR";
        error.response.error = {
            "code" : type,
            "message" : message
        };
    } else {
        error.name = "RPC_ERROR";
        error.response.error = data.error;
    }
    return error;
};

var tars = tars || {};
module.exports.tars = tars;

tars.QueryFProxy = function () {
    this._name    = undefined;
    this._worker  = undefined;
};

tars.QueryFProxy.prototype.setTimeout = function (iTimeout) {
    this._worker.timeout = iTimeout;
};

tars.QueryFProxy.prototype.getTimeout = function () {
    return this._worker.timeout;
};

tars.QueryFProxy.prototype.setVersion = function (iVersion) {
    this._worker.version = iVersion;
};

tars.QueryFProxy.prototype.getVersion = function () {
    return this._worker.version;
};

var __tars_QueryF$findObjectById$IF = {
    "name" : "findObjectById",
    "return" : "list(tars.EndpointF)",
    "arguments" : [{
        "name" : "id",
        "class" : "string",
        "direction" : "in"
    }]
};

var __tars_QueryF$findObjectById$IE = function (id) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, id);
    return os.getBinBuffer();
};

var __tars_QueryF$findObjectById$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readList(0, true, TarsStream.List(_TARS_MODULE_A_.tars.EndpointF))
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_QueryF$findObjectById$PE = function (id, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeString("id", id);
    return tup;
};

var __tars_QueryF$findObjectById$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readList("", TarsStream.List(_TARS_MODULE_A_.tars.EndpointF), new TarsStream.List(_TARS_MODULE_A_.tars.EndpointF))
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_QueryF$findObjectById$ER = function (data) {
    throw _makeError(data, "Call QueryF::findObjectById failed");
};

tars.QueryFProxy.prototype.findObjectById = function (id) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("findObjectById", __tars_QueryF$findObjectById$PE(id, version), arguments[arguments.length - 1], __tars_QueryF$findObjectById$IF).then(__tars_QueryF$findObjectById$PD, __tars_QueryF$findObjectById$ER);
    } else {
        return this._worker.tars_invoke("findObjectById", __tars_QueryF$findObjectById$IE(id), arguments[arguments.length - 1], __tars_QueryF$findObjectById$IF).then(__tars_QueryF$findObjectById$ID, __tars_QueryF$findObjectById$ER);
    }
};
tars.QueryFProxy.findObjectById = __tars_QueryF$findObjectById$IF;

var __tars_QueryF$findObjectById4All$IF = {
    "name" : "findObjectById4All",
    "return" : "int32",
    "arguments" : [{
        "name" : "id",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "activeEp",
        "class" : "list(tars.EndpointF)",
        "direction" : "out"
    }, {
        "name" : "inactiveEp",
        "class" : "list(tars.EndpointF)",
        "direction" : "out"
    }]
};

var __tars_QueryF$findObjectById4All$IE = function (id) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, id);
    return os.getBinBuffer();
};

var __tars_QueryF$findObjectById4All$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "activeEp" : is.readList(2, true, TarsStream.List(_TARS_MODULE_A_.tars.EndpointF)),
                    "inactiveEp" : is.readList(3, true, TarsStream.List(_TARS_MODULE_A_.tars.EndpointF))
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_QueryF$findObjectById4All$PE = function (id, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeString("id", id);
    return tup;
};

var __tars_QueryF$findObjectById4All$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "activeEp" : tup.readList("activeEp", TarsStream.List(_TARS_MODULE_A_.tars.EndpointF)),
                    "inactiveEp" : tup.readList("inactiveEp", TarsStream.List(_TARS_MODULE_A_.tars.EndpointF))
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_QueryF$findObjectById4All$ER = function (data) {
    throw _makeError(data, "Call QueryF::findObjectById4All failed");
};

tars.QueryFProxy.prototype.findObjectById4All = function (id) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("findObjectById4All", __tars_QueryF$findObjectById4All$PE(id, version), arguments[arguments.length - 1], __tars_QueryF$findObjectById4All$IF).then(__tars_QueryF$findObjectById4All$PD, __tars_QueryF$findObjectById4All$ER);
    } else {
        return this._worker.tars_invoke("findObjectById4All", __tars_QueryF$findObjectById4All$IE(id), arguments[arguments.length - 1], __tars_QueryF$findObjectById4All$IF).then(__tars_QueryF$findObjectById4All$ID, __tars_QueryF$findObjectById4All$ER);
    }
};
tars.QueryFProxy.findObjectById4All = __tars_QueryF$findObjectById4All$IF;

var __tars_QueryF$findObjectById4Any$IF = {
    "name" : "findObjectById4Any",
    "return" : "int32",
    "arguments" : [{
        "name" : "id",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "activeEp",
        "class" : "list(tars.EndpointF)",
        "direction" : "out"
    }, {
        "name" : "inactiveEp",
        "class" : "list(tars.EndpointF)",
        "direction" : "out"
    }]
};

var __tars_QueryF$findObjectById4Any$IE = function (id) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, id);
    return os.getBinBuffer();
};

var __tars_QueryF$findObjectById4Any$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "activeEp" : is.readList(2, true, TarsStream.List(_TARS_MODULE_A_.tars.EndpointF)),
                    "inactiveEp" : is.readList(3, true, TarsStream.List(_TARS_MODULE_A_.tars.EndpointF))
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_QueryF$findObjectById4Any$PE = function (id, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeString("id", id);
    return tup;
};

var __tars_QueryF$findObjectById4Any$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "activeEp" : tup.readList("activeEp", TarsStream.List(_TARS_MODULE_A_.tars.EndpointF)),
                    "inactiveEp" : tup.readList("inactiveEp", TarsStream.List(_TARS_MODULE_A_.tars.EndpointF))
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_QueryF$findObjectById4Any$ER = function (data) {
    throw _makeError(data, "Call QueryF::findObjectById4Any failed");
};

tars.QueryFProxy.prototype.findObjectById4Any = function (id) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("findObjectById4Any", __tars_QueryF$findObjectById4Any$PE(id, version), arguments[arguments.length - 1], __tars_QueryF$findObjectById4Any$IF).then(__tars_QueryF$findObjectById4Any$PD, __tars_QueryF$findObjectById4Any$ER);
    } else {
        return this._worker.tars_invoke("findObjectById4Any", __tars_QueryF$findObjectById4Any$IE(id), arguments[arguments.length - 1], __tars_QueryF$findObjectById4Any$IF).then(__tars_QueryF$findObjectById4Any$ID, __tars_QueryF$findObjectById4Any$ER);
    }
};
tars.QueryFProxy.findObjectById4Any = __tars_QueryF$findObjectById4Any$IF;

var __tars_QueryF$findObjectByIdInSameGroup$IF = {
    "name" : "findObjectByIdInSameGroup",
    "return" : "int32",
    "arguments" : [{
        "name" : "id",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "activeEp",
        "class" : "list(tars.EndpointF)",
        "direction" : "out"
    }, {
        "name" : "inactiveEp",
        "class" : "list(tars.EndpointF)",
        "direction" : "out"
    }]
};

var __tars_QueryF$findObjectByIdInSameGroup$IE = function (id) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, id);
    return os.getBinBuffer();
};

var __tars_QueryF$findObjectByIdInSameGroup$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "activeEp" : is.readList(2, true, TarsStream.List(_TARS_MODULE_A_.tars.EndpointF)),
                    "inactiveEp" : is.readList(3, true, TarsStream.List(_TARS_MODULE_A_.tars.EndpointF))
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_QueryF$findObjectByIdInSameGroup$PE = function (id, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeString("id", id);
    return tup;
};

var __tars_QueryF$findObjectByIdInSameGroup$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "activeEp" : tup.readList("activeEp", TarsStream.List(_TARS_MODULE_A_.tars.EndpointF)),
                    "inactiveEp" : tup.readList("inactiveEp", TarsStream.List(_TARS_MODULE_A_.tars.EndpointF))
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_QueryF$findObjectByIdInSameGroup$ER = function (data) {
    throw _makeError(data, "Call QueryF::findObjectByIdInSameGroup failed");
};

tars.QueryFProxy.prototype.findObjectByIdInSameGroup = function (id) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("findObjectByIdInSameGroup", __tars_QueryF$findObjectByIdInSameGroup$PE(id, version), arguments[arguments.length - 1], __tars_QueryF$findObjectByIdInSameGroup$IF).then(__tars_QueryF$findObjectByIdInSameGroup$PD, __tars_QueryF$findObjectByIdInSameGroup$ER);
    } else {
        return this._worker.tars_invoke("findObjectByIdInSameGroup", __tars_QueryF$findObjectByIdInSameGroup$IE(id), arguments[arguments.length - 1], __tars_QueryF$findObjectByIdInSameGroup$IF).then(__tars_QueryF$findObjectByIdInSameGroup$ID, __tars_QueryF$findObjectByIdInSameGroup$ER);
    }
};
tars.QueryFProxy.findObjectByIdInSameGroup = __tars_QueryF$findObjectByIdInSameGroup$IF;

var __tars_QueryF$findObjectByIdInSameSet$IF = {
    "name" : "findObjectByIdInSameSet",
    "return" : "int32",
    "arguments" : [{
        "name" : "id",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "setId",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "activeEp",
        "class" : "list(tars.EndpointF)",
        "direction" : "out"
    }, {
        "name" : "inactiveEp",
        "class" : "list(tars.EndpointF)",
        "direction" : "out"
    }]
};

var __tars_QueryF$findObjectByIdInSameSet$IE = function (id, setId) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, id);
    os.writeString(2, setId);
    return os.getBinBuffer();
};

var __tars_QueryF$findObjectByIdInSameSet$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "activeEp" : is.readList(3, true, TarsStream.List(_TARS_MODULE_A_.tars.EndpointF)),
                    "inactiveEp" : is.readList(4, true, TarsStream.List(_TARS_MODULE_A_.tars.EndpointF))
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_QueryF$findObjectByIdInSameSet$PE = function (id, setId, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeString("id", id);
    tup.writeString("setId", setId);
    return tup;
};

var __tars_QueryF$findObjectByIdInSameSet$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "activeEp" : tup.readList("activeEp", TarsStream.List(_TARS_MODULE_A_.tars.EndpointF)),
                    "inactiveEp" : tup.readList("inactiveEp", TarsStream.List(_TARS_MODULE_A_.tars.EndpointF))
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_QueryF$findObjectByIdInSameSet$ER = function (data) {
    throw _makeError(data, "Call QueryF::findObjectByIdInSameSet failed");
};

tars.QueryFProxy.prototype.findObjectByIdInSameSet = function (id, setId) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("findObjectByIdInSameSet", __tars_QueryF$findObjectByIdInSameSet$PE(id, setId, version), arguments[arguments.length - 1], __tars_QueryF$findObjectByIdInSameSet$IF).then(__tars_QueryF$findObjectByIdInSameSet$PD, __tars_QueryF$findObjectByIdInSameSet$ER);
    } else {
        return this._worker.tars_invoke("findObjectByIdInSameSet", __tars_QueryF$findObjectByIdInSameSet$IE(id, setId), arguments[arguments.length - 1], __tars_QueryF$findObjectByIdInSameSet$IF).then(__tars_QueryF$findObjectByIdInSameSet$ID, __tars_QueryF$findObjectByIdInSameSet$ER);
    }
};
tars.QueryFProxy.findObjectByIdInSameSet = __tars_QueryF$findObjectByIdInSameSet$IF;

var __tars_QueryF$findObjectByIdInSameStation$IF = {
    "name" : "findObjectByIdInSameStation",
    "return" : "int32",
    "arguments" : [{
        "name" : "id",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "sStation",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "activeEp",
        "class" : "list(tars.EndpointF)",
        "direction" : "out"
    }, {
        "name" : "inactiveEp",
        "class" : "list(tars.EndpointF)",
        "direction" : "out"
    }]
};

var __tars_QueryF$findObjectByIdInSameStation$IE = function (id, sStation) {
    var os = new TarsStream.TarsOutputStream();
    os.writeString(1, id);
    os.writeString(2, sStation);
    return os.getBinBuffer();
};

var __tars_QueryF$findObjectByIdInSameStation$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "activeEp" : is.readList(3, true, TarsStream.List(_TARS_MODULE_A_.tars.EndpointF)),
                    "inactiveEp" : is.readList(4, true, TarsStream.List(_TARS_MODULE_A_.tars.EndpointF))
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_QueryF$findObjectByIdInSameStation$PE = function (id, sStation, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeString("id", id);
    tup.writeString("sStation", sStation);
    return tup;
};

var __tars_QueryF$findObjectByIdInSameStation$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "activeEp" : tup.readList("activeEp", TarsStream.List(_TARS_MODULE_A_.tars.EndpointF)),
                    "inactiveEp" : tup.readList("inactiveEp", TarsStream.List(_TARS_MODULE_A_.tars.EndpointF))
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __tars_QueryF$findObjectByIdInSameStation$ER = function (data) {
    throw _makeError(data, "Call QueryF::findObjectByIdInSameStation failed");
};

tars.QueryFProxy.prototype.findObjectByIdInSameStation = function (id, sStation) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("findObjectByIdInSameStation", __tars_QueryF$findObjectByIdInSameStation$PE(id, sStation, version), arguments[arguments.length - 1], __tars_QueryF$findObjectByIdInSameStation$IF).then(__tars_QueryF$findObjectByIdInSameStation$PD, __tars_QueryF$findObjectByIdInSameStation$ER);
    } else {
        return this._worker.tars_invoke("findObjectByIdInSameStation", __tars_QueryF$findObjectByIdInSameStation$IE(id, sStation), arguments[arguments.length - 1], __tars_QueryF$findObjectByIdInSameStation$IF).then(__tars_QueryF$findObjectByIdInSameStation$ID, __tars_QueryF$findObjectByIdInSameStation$ER);
    }
};
tars.QueryFProxy.findObjectByIdInSameStation = __tars_QueryF$findObjectByIdInSameStation$IF;



